use ast::{self, Sourced};
use crate::error::UserError;
use lalrpop_util::ParseError;

grammar;

extern {
  type Error = UserError<'input>;
}

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  _
}

WithSource<T>: Sourced<T> = {
  @L T => (<>)
}

Delim<T,D>: Vec<T> = {
  <mut v: (<T> D)*> <e: T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}

Around<L, T, R>: T = {
  L <T> R => <>
}

Comma<T> = Delim<T, ",">;

Ident = WithSource<r##"[a-zA-Z_][a-zA-Z_0-9]*"##>;


dec: i32 = <l: @L> <to_parse: r##"[\+\-]?[0-9]+"##> =>? to_parse.parse::<i32>().map_err(|err| ParseError::User {
  error: UserError::ParseIntegerError(l, err, to_parse)
});

IntLiteral_: ast::Literal = {
  <loc: @L> <to_parse: r##"0x[0-9a-fA-F]+"##> =>? {
    i32::from_str_radix(&to_parse[2..], 16)
      .map(ast::Literal::Int)
      .map_err(|err| ParseError::User {
        error: UserError::ParseIntegerError(loc, err, to_parse)
      })
  },
  <loc: @L> <to_parse: r##"0b[01]+"##> =>? {
    i32::from_str_radix(&to_parse[2..], 2)
      .map(ast::Literal::Int)
      .map_err(|err| ParseError::User {
        error: UserError::ParseIntegerError(loc, err, to_parse)
      })
  },
  <loc: @L> <to_parse: r##"0o[0-7]+"##> =>? {
    i32::from_str_radix(&to_parse[2..], 8)
      .map(ast::Literal::Int)
      .map_err(|err| ParseError::User {
        error: UserError::ParseIntegerError(loc, err, to_parse)
      })
  },
  dec => ast::Literal::Int(<>),
}
FloatLiteral_: ast::Literal = {
  <loc: @L> <to_parse: r##"[\-\+]?[0-9]+\.[0-9]+([eE][\+\-]?[0-9]+)?"##> =>? {
    to_parse.parse::<f32>()
      .map(ast::Literal::Float)
      .map_err(|err| ParseError::User {
        error: UserError::ParseFloatError(loc, err, to_parse)
      })
  }
}

BoolLiteral_: ast::Literal = {
  "true" => ast::Literal::Bool(true),
  "false" => ast::Literal::Bool(false)
}

Literal_: ast::Literal = {
  BoolLiteral_,
  IntLiteral_ ,
  FloatLiteral_ ,
  "{" <Comma<Literal>> "}" => ast::Literal::List(<>),
}
Literal = WithSource<Literal_>;


//基本类型
PrimType_: ast::PrimType = {
  "void" => ast::PrimType::Void,
  "bool" => ast::PrimType::Bool,
  "int" => ast::PrimType::Int,
  "float" => ast::PrimType::Float,
}

PrimType = WithSource<PrimType_>;

LogicalOrOp_: ast::BinaryOp = "||" => ast::BinaryOp::LogicalOr;
LogicalOrOp = WithSource<LogicalOrOp_>;
LogicalAndOp_: ast::BinaryOp = "&&" => ast::BinaryOp::LogicalAnd;
LogicalAndOp = WithSource<LogicalAndOp_>;
BitOrOp_: ast::BinaryOp = "|" => ast::BinaryOp::BitOr;
BitOrOp = WithSource<BitOrOp_>;
BitXorOp_: ast::BinaryOp = "^" => ast::BinaryOp::BitXor;
BitXorOp = WithSource<BitXorOp_>;
BitAndOp_: ast::BinaryOp = "&" => ast::BinaryOp::BitAnd;
BitAndOp = WithSource<BitAndOp_>;
EqOp_: ast::BinaryOp = "==" => ast::BinaryOp::Eq;
EqOp = WithSource<EqOp_>;
NeOp_: ast::BinaryOp = "!=" => ast::BinaryOp::Ne;
NeOp = WithSource<NeOp_>;
LtOp_: ast::BinaryOp = "<" => ast::BinaryOp::Lt;
LtOp = WithSource<LtOp_>;
GtOp_: ast::BinaryOp = ">" => ast::BinaryOp::Gt;
GtOp = WithSource<GtOp_>;
LeOp_: ast::BinaryOp = "<=" => ast::BinaryOp::Le;
LeOp = WithSource<LeOp_>;
GeOp_: ast::BinaryOp = ">=" => ast::BinaryOp::Ge;
GeOp = WithSource<GeOp_>;
ShlOp_: ast::BinaryOp = "<<" => ast::BinaryOp::Shl;
ShlOp = WithSource<ShlOp_>;
ShrOp_: ast::BinaryOp = ">>" => ast::BinaryOp::Shr;
ShrOp = WithSource<ShrOp_>;
AddOp_: ast::BinaryOp = "+" => ast::BinaryOp::Add;
AddOp = WithSource<AddOp_>;
SubOp_: ast::BinaryOp = "-" => ast::BinaryOp::Sub;
SubOp = WithSource<SubOp_>;
MulOp_: ast::BinaryOp = "*" => ast::BinaryOp::Mul;
MulOp = WithSource<MulOp_>;
DivOp_: ast::BinaryOp = "/" => ast::BinaryOp::Div;
DivOp = WithSource<DivOp_>;
ModOp_: ast::BinaryOp = "%" => ast::BinaryOp::Mod;
ModOp = WithSource<ModOp_>;

PosOp_: ast::UnaryOp = "+" => ast::UnaryOp::Pos;
PosOp = WithSource<PosOp_>;
NegOp_: ast::UnaryOp = "-" => ast::UnaryOp::Neg;
NegOp = WithSource<NegOp_>;
NotOp_: ast::UnaryOp = "!" => ast::UnaryOp::Not;
NotOp = WithSource<NotOp_>;
BitNotOp_: ast::UnaryOp = "~" => ast::UnaryOp::BitNot;
BitNotOp = WithSource<BitNotOp_>;
UnaryOp = { PosOp, NegOp, NotOp, BitNotOp };

EqNeOp = { EqOp, NeOp };
CmpOp = { LtOp, GtOp, LeOp, GeOp };
ShiftOp = { ShlOp, ShrOp };
AddSubOp = { AddOp, SubOp };
MulDivModOp = { MulOp, DivOp, ModOp };

Tier<Op, NextTier>: ast::Expr<'input> = {
  <loc: @L> <lhs: WithSource<Tier<Op, NextTier>>> <op:Op> <rhs: WithSource<NextTier>> => ast::Expr::Binary(
    (
      loc,
      ast::Binary { lhs: Box::new(lhs), op, rhs: Box::new(rhs) }
    )
  ),
  NextTier,
}

Expr = WithSource<LogicalOr>;
LogicalOr = Tier<LogicalOrOp, LogicalAnd>;
LogicalAnd = Tier<LogicalAndOp, BitOr>;
BitOr = Tier<BitOrOp, BitXor>;
BitXor = Tier<BitXorOp, BitAnd>;
BitAnd = Tier<BitAndOp, EqNe>;
EqNe = Tier<EqNeOp, Relational>;
Relational = Tier<CmpOp, Shift>;
Shift = Tier<ShiftOp, AddSub>;
AddSub = Tier<AddSubOp, MulDivMod>;
MulDivMod = Tier<MulDivModOp, Unary>;

Unary: ast::Expr<'input> = {
  <loc: @L> <op:UnaryOp> <rhs: WithSource<Unary>> => ast::Expr::Unary(
    (
      loc,
      ast::Unary { op, rhs: Box::new(rhs) }
    )
  ),
  PrimExpr => ast::Expr::Prim(<>)
}


LValue_: ast::LValue<'input> = {
  Ident => ast::LValue::Ident(<>),
  Ident ("["<Expr>"]")+ => ast::LValue::Idx(<>),
}
LValue = WithSource<LValue_>;
 
PrimExpr_: ast::PrimExpr<'input> = {
  LValue => ast::PrimExpr::LValue(<>),
  Literal => ast::PrimExpr::Literal(<>),
  "(" <Expr> ")" => ast::PrimExpr::Paren(Box::new(<>)),
  <Ident> "(" <WithSource<Comma<Expr>>> ")" =>  ast::PrimExpr::Call(<>),
}
PrimExpr = WithSource<PrimExpr_>;


TypeIdent: (Sourced<ast::Type>, Sourced<&'input str>) = {
  <begin: @L> <ty: PrimType> <id: Ident> => ((begin, ast::Type::Prim(ty)), id),
  <loc0: @L> <ty: PrimType> <id: Ident> <loc1: @L> <idxs: (Around<"[", dec, "]">)+> => ((loc0, ast::Type::Array(ty, (loc1, idxs))), id),
}

GlobalVarDecl_: ast::GlobalVarDecl<'input> = {
  <ty: TypeIdent> ";" => ast::GlobalVarDecl { ty: ty.0, ident: ty.1, init: None },
  <ty: TypeIdent> "=" <init: Literal> ";" => ast::GlobalVarDecl { ty: ty.0, ident: ty.1, init: Some(init) },
}

GlobalVarDecl = WithSource<GlobalVarDecl_>;
VarDecl_: ast::VarDecl<'input> = {
  <ty: TypeIdent> ";" => ast::VarDecl { ty: ty.0, ident: ty.1, init: None },
  <ty: TypeIdent> "=" <init: Expr> ";" => ast::VarDecl { ty: ty.0, ident: ty.1, init: Some(init) },
}
VarDecl = WithSource<VarDecl_>;

ConstDecl_: ast::ConstDecl<'input> = {
  "const" <ty: TypeIdent> "=" <init: Literal> ";" => ast::ConstDecl { ty: ty.0, ident: ty.1, init },
}

ConstDecl = WithSource<ConstDecl_>;
AssignStmt_: ast::AssignStmt<'input> = {
  <lhs: LValue> "=" <rhs: Expr> ";" => ast::AssignStmt { lhs, rhs },
}
AssignStmt = WithSource<AssignStmt_>;

FuncParam_: ast::FuncParam<'input> = <loc:@L> <ti:TypeIdent> => ast::FuncParam { ty: ti.0, ident: ti.1 };
FuncParam = WithSource<FuncParam_>;
FuncProto_: ast::FuncProto<'input> = {
  <ty: PrimType> <ident: Ident> "(" <params: WithSource<Comma<FuncParam>>> ")" => ast::FuncProto { ty, ident, params },
}
FuncProto = WithSource<FuncProto_>;

IfStmt_: ast::IfStmt<'input> = {
  "if" "(" <Expr> ")" <Block> => ast::IfStmt::If(<>),
  "if" "(" <Expr> ")" <Block> "else" <Block> => ast::IfStmt::IfElse(<>),
  "if" "(" <cond: Expr> ")" <then: Block> "else" <alt: IfStmt> => ast::IfStmt::IfElseIf(cond, then, Box::new(alt)),
}
IfStmt = WithSource<IfStmt_>;

WhileStmt_: ast::WhileStmt<'input> = {
  "while" "(" <cond: Expr> ")" <body: Block> => ast::WhileStmt { cond, body },
}
WhileStmt = WithSource<WhileStmt_>;

Break_: () = "break" ";" => ();
Continue_: () = "continue" ";" => ();
Break = WithSource<Break_>;
Continue = WithSource<Continue_>;

Return_: Option<Sourced<ast::Expr<'input>>> = "return" <Expr?> ";" => <>;
Return = WithSource<Return_>;

Stmt_: ast::Stmt<'input> = {
  ConstDecl => ast::Stmt::ConstDecl(<>),
  VarDecl => ast::Stmt::VarDecl(<>),
  AssignStmt => ast::Stmt::Assign(<>),
  IfStmt => ast::Stmt::If(<>),
  WhileStmt => ast::Stmt::While(<>),
  Break => ast::Stmt::Break(<>),
  Continue => ast::Stmt::Continue(<>),
  Return => ast::Stmt::Return(<>),
  <Expr> ";" => ast::Stmt::Expr(<>),
  Block => ast::Stmt::Block(<>),
}
Stmt = WithSource<Stmt_>;
Block_: ast::Block<'input> = {
  "{" <stmts: Stmt+> "}" => <>,
}
Block = WithSource<Block_>;

FuncDef_: ast::FuncDef<'input> = {
  <proto: FuncProto> <body: Block> => ast::FuncDef { proto, body },
}
FuncDef = WithSource<FuncDef_>;

Unit_: ast::Unit<'input> = {
  ConstDecl => ast::Unit::ConstDecl(<>),
  GlobalVarDecl => ast::Unit::GlobalVarDecl(<>),
  "extern" <FuncProto> ";" => ast::Unit::ExternalFuncDecl(<>),
  <FuncProto> ";" => ast::Unit::FuncDecl(<>),
  FuncDef => ast::Unit::FuncDef(<>),
}

Unit = WithSource<Unit_>;

pub Module: ast::Module<'input> = Unit+ => ast::Module(<>);
